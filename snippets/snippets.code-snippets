{
  "Generate Model File": {
    "scope": "sfm",
    "prefix": "sfmodel",
    "body": [
      "package ${1:packageName};",
      "",
      "import jakarta.persistence.Entity;",
      "import jakarta.persistence.Table;",
      "import jakarta.persistence.GeneratedValue;",
      "import jakarta.persistence.GenerationType;",
      "import jakarta.persistence.Id;",
      "",
      "@Entity\n@Table(name=${2:tableName})",
      "public class $TM_FILENAME_BASE{",
      "",
      "${0:attributes}",
      "",
      "}"
    ]
  },
  "Generate Service File": {
    "scope": "sfs",
    "prefix": "sfservice",
    "body": [
      "package ${1:packageName};",
      "",
      "import java.util.List;",
      "",
      "public interface  $TM_FILENAME_BASE {",
      "",
      "  public List<${2:class}> findAll();",
      "",
      "  public  ${2:class} findById(Integer id);",
      "",
      "  public void delete(${2:class} ${0:paramName});",
      "",
      "  public void save(${2:class} ${0:paramName});",
      "",
      "}"
    ]
  },
  "Generate RestController File": {
    "scope": "sfrc",
    "prefix": "sfrestcontroller",
    "body": [
      "package ${1:packageName};",
      "",
      "import java.util.List;",
      "",
      "import org.springframework.beans.factory.annotation.Autowired;",
      "import org.springframework.http.HttpStatus;",
      "import org.springframework.http.ResponseEntity;",
      "import org.springframework.web.bind.annotation.CrossOrigin;",
      "import org.springframework.web.bind.annotation.DeleteMapping;",
      "import org.springframework.web.bind.annotation.GetMapping;",
      "import org.springframework.web.bind.annotation.PathVariable;",
      "import org.springframework.web.bind.annotation.PostMapping;",
      "import org.springframework.web.bind.annotation.RequestBody;",
      "import org.springframework.web.bind.annotation.RequestMapping;",
      "import org.springframework.web.bind.annotation.RestController;",
      "",
      "@RestController",
      "@RequestMapping(${2:mapping})",
      "public class ${5:controllerMainClass} $TM_FILENAME_BASE {",
      "",
      "    @Autowired",
      "    private ${3:serviceClass} ${4:serviceName};",
      "",
      "    @GetMapping(\"/\")",
      "    @CrossOrigin(origins = \"*\")",
      "    public List<${5:controllerMainClass}> findAll() {",
      "        return ${4:serviceName}.findAll();",
      "    }",
      "",
      "    @PostMapping(\"/\")",
      "    @CrossOrigin(origins = \"*\")",
      "    public ResponseEntity<${5:controllerMainClass}> create(@RequestBody ${5:controllerMainClass} body) {",
      "",
      "        try {",
      "            ${4:serviceName}.save(body);",
      "            return new ResponseEntity<${5:controllerMainClass}>(body, HttpStatus.OK);",
      "",
      "        } catch (Exception e) {",
      "            System.out.println(e);",
      "            return new ResponseEntity<${5:controllerMainClass}>(body, HttpStatus.BAD_REQUEST);",
      "        }",
      "",
      "    }",
      "",
      "    @GetMapping(\"/{id}\")",
      "    @CrossOrigin(origins = \"*\")",
      "    public ${5:controllerMainClass} findAll(@PathVariable Integer id) {",
      "        return ${4:serviceName}.findById(id);",
      "    }",
      "",
      "    @DeleteMapping(\"/{id}\")",
      "    @CrossOrigin(origins = \"*\")",
      "    public ResponseEntity<${5:controllerMainClass}> delete(@PathVariable Integer id) {",
      "",
      "        ${5:controllerMainClass} toDelete = ${4:serviceName}.findById(id);",
      "",
      "        try {",
      "            ${4:serviceName}.delete(toDelete);",
      "            return new ResponseEntity<${5:controllerMainClass}>(toDelete, HttpStatus.OK);",
      "",
      "        } catch (Exception e) {",
      "            System.out.println(e);",
      "            return new ResponseEntity<${5:controllerMainClass}>(toDelete, HttpStatus.NOT_FOUND);",
      "        }",
      "",
      "    }",
      "}"
    ]
  },
  "Generate Controller File": {
    "scope": "sfc",
    "prefix": "sfcontroller",
    "body": [
      "package ${1:packageName};",
      "",
      "import java.util.List;",
      "",
      "import org.springframework.beans.factory.annotation.Autowired;",
      "import org.springframework.web.bind.annotation.CrossOrigin;",
      "import org.springframework.web.bind.annotation.DeleteMapping;",
      "import org.springframework.web.bind.annotation.GetMapping;",
      "import org.springframework.web.bind.annotation.PathVariable;",
      "import org.springframework.web.bind.annotation.PostMapping;",
      "import org.springframework.web.bind.annotation.RequestBody;",
      "import org.springframework.web.bind.annotation.RequestMapping;",
      "import org.springframework.web.bind.annotation.Controller;",
      "",
      "@Controller",
      "@RequestMapping(${2:mapping})",
      "public class ${5:controllerMainClass} $TM_FILENAME_BASE {",
      "",
      "    @Autowired",
      "    private ${3:serviceClass} ${4:serviceName};",
      "",
      "    @GetMapping(\"/\")",
      "    public List<${5:controllerMainClass}> findAll(Model model) {",
      "        public List<${5:controllerMainClass}> models = ${3:serviceName}.findAll();",
      "        model.addAttributes(\"model\", )",
      "    }",
      "",
      "    @PostMapping(\"/\")",
      "    public String create(@RequestBody ${5:controllerMainClass} body) {",
      "",
      "        try {",
      "            ${4:serviceName}.save(body);",
      "            return \"redirect:/\"",
      "",
      "        } catch (Exception e) {",
      "            System.out.println(e);",
      "            return \"redirect:/\"",
      "        }",
      "",
      "    }",
      "",
      "    @GetMapping(\"/{id}\")",
      "    public String findAll(@PathVariable Integer id) {",
      "        ${5:controllerMainClass} ${4:serviceName}.findById(id);",
      "        return \"redirect:/\"",
      "    }",
      "",
      "    @DeleteMapping(\"/{id}\")",
      "    public String delete(@PathVariable Integer id) {",
      "",
      "        ${5:controllerMainClass} toDelete = ${4:serviceName}.findById(id);",
      "",
      "        try {",
      "            ${4:serviceName}.delete(toDelete);",
      "            return \"redirect:/\"",
      "",
      "        } catch (Exception e) {",
      "            System.out.println(e);",
      "            return \"redirect:/\"",
      "        }",
      "",
      "    }",
      "}"
    ]
  },
  "Generate Service Implement File": {
    "prefix": "sfserviceimp",
    "scope": "sfsi",
    "body": [
      "package ${1:packageName};",
      "",
      "import org.springframework.context.annotation.Primary;",
      "import org.springframework.stereotype.Service;",
      "",
      "@Service",
      "@Primary",
      "public class $TM_FILENAME_BASE implements ${2:serviceFileName} {",
      "    ${0:implementMethods}",
      "}"
    ]
  },
  "Generate Security File": {
    "prefix": "ssc",
    "scope": "ssconfig",
    "body": [
      "package ${1:packageName};",
      "\r",
      "import javax.sql.DataSource;\r",
      "import org.springframework.beans.factory.annotation.Autowired;\r",
      "import org.springframework.context.annotation.Bean;\r",
      "import org.springframework.context.annotation.Configuration;\r",
      "import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\r",
      "import org.springframework.security.config.annotation.web.builders.HttpSecurity;\r",
      "import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r",
      "import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r",
      "import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r",
      "import org.springframework.security.crypto.password.PasswordEncoder;\r",
      "\r",
      "/*\r",
      " * Spring Security Configuration File\r",
      " */\r",
      "\r",
      "@Configuration\r",
      "@EnableWebSecurity\r",
      "public class $TM_FILENAME_BASE extends WebSecurityConfigurerAdapter {\r",
      "\r",
      "\t@Autowired\r",
      "\tprivate DataSource dataSource;\r",
      "\r",
      "\t@Override\r",
      "\tprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\r",
      "\t\tauth\r",
      "\t\t\t\t.jdbcAuthentication()\r",
      "\t\t\t\t.dataSource(dataSource)\r",
      "\t\t\t\t.usersByUsernameQuery(\r",
      "\t\t\t\t\t\t\"select username, password from Users where username=?\")\r",
      "\t\t\t\t.authoritiesByUsernameQuery(\r",
      "\t\t\t\t\t\t\"select u.username, p.name from UserRole ur \" +\r",
      "\t\t\t\t\t\t\t\t\"inner join Users u on u.id = ur.user_id \" +\r",
      "\t\t\t\t\t\t\t\t\"inner join Profiles p on p.id = ur.profile_id \" +\r",
      "\t\t\t\t\t\t\t\t\"where u.username = ?\");\r",
      "\t}\r",
      "\r",
      "\t@Override\r",
      "\tprotected void configure(HttpSecurity http) throws Exception {\r",
      "\t\t// Auth static files\r",
      "\t\thttp\r",
      "\t\t\t\t.authorizeRequests()\r",
      "\t\t\t\t.antMatchers(\"/images/**\", \"/css/**\")\r",
      "\t\t\t\t.permitAll()\r",
      "\r",
      "\t\t\t\t.antMatchers(\"/\")\r",
      "\t\t\t\t.permitAll()\r",
      "\t\t\t\t.and()\r",
      "\t\t\t\t.formLogin()\r",
      "\t\t\t\t.permitAll();\r",
      "\t}\r",
      "\r",
      "\t@Bean\r",
      "\tpublic PasswordEncoder passwordEncoder() {\r",
      "\t\treturn new BCryptPasswordEncoder();\r",
      "\t}\r",
      "}"
    ]
  },

  "Generate MultiPart File Util Class": {
    "prefix": "sfmul",
    "scope": "sfmultipartutil",
    "body": [
      "package ${1:packageName};",
      "\r",
      "import java.io.File;\r",
      "import java.io.IOException;\r",
      "import org.springframework.web.multipart.MultipartFile;\r",
      "\r",
      "public class $TM_FILENAME_BASE {\r",
      "\r",
      "\tpublic static String save(MultipartFile multiPart, String url) {\r",
      "\t\tString originalName = multiPart.getOriginalFilename();\r",
      "\t\tString randomChars = randomAlphanumeric(10);\r",
      "\t\toriginalName = originalName.replace(\" \", \"-\");\r",
      "\t\toriginalName = randomChars + originalName;\r",
      "\t\ttry {\r",
      "\t\t\tFile imageFile = new File(url + originalName);\r",
      "\t\t\tmultiPart.transferTo(imageFile);\r",
      "\t\t\treturn originalName;\r",
      "\t\t} catch (IOException e) {\r",
      "\t\t\tSystem.out.println(\"Error \" + e.getMessage());\r",
      "\t\t\treturn null;\r",
      "\t\t}\r",
      "\t}\r",
      "\r",
      "\tpublic static String randomAlphanumeric(int count) {\r",
      "\t\tString CHARS = \"ABCDEFGHIJKMNLOPQRSTUVWXYZ0123456789\";\r",
      "\t\tStringBuilder builder = new StringBuilder();\r",
      "\t\twhile (count-- != 0) {\r",
      "\t\t\tint character = (int) (Math.random() * CHARS.length());\r",
      "\t\t\tbuilder.append(CHARS.charAt(character));\r",
      "\t\t}\r",
      "\t\treturn builder.toString();\r",
      "\t}\r",
      "\r",
      "}"
    ]
  },

  "Generate Repository File": {
    "prefix": "sfrepo",
    "scope": "sfrepository",
    "body": [
      "package ${1:packageName};",
      "",
      "import org.springframework.data.jpa.repository.JpaRepository;",
      "",
      "public interface $TM_FILENAME_BASE extends JpaRepository<${2:Class},Integer>{",
      "    ${0://Your Code Here}",
      "}"
    ]
  }
}
